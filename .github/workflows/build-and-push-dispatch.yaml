name: Manual Build & Push
on:
  workflow_dispatch:
    inputs:
      BuildImageTag:
        description: 'Build Image Tag'
        required: true
        default: 'latest'
        type: choice
        options:
        - development-v6
        - dev
        - latest
        - beta
      BaseImageTag:
        description: 'Base Image Tag'
        required: true
        default: 'latest'
        type: choice
        options:
        - development-v6
        - dev
        - latest

jobs:
  job01:
    name: Build and publish
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        env:
          IMAGE_TAG: ${{ inputs.BuildImageTag }}
        with:
          images: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/pihole-bind9
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ inputs.BuildImageTag }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      -
        name: Build and push [latest / dev]
        if: inputs.BaseImageTag == 'latest' || inputs.BaseImageTag == 'dev'
        uses: docker/build-push-action@v6
        env:
          IMAGE_TAG: ${{ inputs.BuildImageTag }}
        with:
          context: ./
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/386
          build-args: BASE_IMG_TAG=${{ inputs.BaseImageTag }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAMESPACE }}/docker-cache:buildcache.pihole-bind9.${{ inputs.BaseImageTag }}
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAMESPACE }}/docker-cache:buildcache.pihole-bind9.${{ inputs.BuildImageTag }},mode=max
      -
        name: Build and push [development-v6]
        if: inputs.BaseImageTag == 'development-v6'
        uses: docker/build-push-action@v6
        env:
          IMAGE_TAG: ${{ inputs.BuildImageTag }}
        with:
          context: ./
          file: ./Dockerfile-Dev-V6
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/386
          build-args: BASE_IMG_TAG=${{ inputs.BaseImageTag }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAMESPACE }}/docker-cache:buildcache.pihole-bind9.${{ inputs.BaseImageTag }}
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_NAMESPACE }}/docker-cache:buildcache.pihole-bind9.${{ inputs.BuildImageTag }},mode=max
      -
        name: Version code [latest]
        if: inputs.BaseImageTag == 'latest'
        id: version_code_check_latest
        run: |
          CHECK_VERSION_CODE=$(curl -s https://api.github.com/repos/pi-hole/docker-pi-hole/releases/latest | grep "name" | cut -d'"' -f 4 | tail -n 1)
          echo "New Version: $CHECK_VERSION_CODE"
          echo VERSION_CODE=$CHECK_VERSION_CODE >> $GITHUB_OUTPUT
      -
        name: Version code [dev / development-v6]
        if: inputs.BaseImageTag == 'dev' || inputs.BaseImageTag == 'development-v6'
        id: version_code_check
        run: |
          CHECK_VERSION_CODE=$(curl -s https://registry.hub.docker.com/v2/repositories/pihole/pihole/tags/${{ inputs.BaseImageTag }} | grep -oP '"tag_last_pushed":"\K[^"]+' | tail -1 | cut -c 1-9 | sed 's/-/./g')
          echo "New Version: $CHECK_VERSION_CODE"
          echo VERSION_CODE=$CHECK_VERSION_CODE >> $GITHUB_OUTPUT
      -
        name: Create release [Release]
        if: inputs.BaseImageTag == 'latest'
        uses: svenstaro/upload-release-action@v2
        with:
          body: |
            ## What's Changed (Docker Image v${{ steps.version_code_check_latest.outputs.VERSION_CODE }})
            * Check Pi-hole Docker detailed changelog [here.](https://github.com/pi-hole/docker-pi-hole/releases/tag/${{ steps.version_code_check_latest.outputs.VERSION_CODE }})
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./digest_base_latest
          release_name: ${{ steps.version_code_check_latest.outputs.VERSION_CODE }}
          tag: ${{ steps.version_code_check_latest.outputs.VERSION_CODE }}
          make_latest: true
          overwrite: true
      -
        name: Create release [PreRelease]
        if: inputs.BaseImageTag == 'dev' || inputs.BaseImageTag == 'development-v6'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./digest_base_${{ inputs.BaseImageTag }}
          release_name: ${{ inputs.BaseImageTag }}-${{ steps.version_code_check.outputs.VERSION_CODE }}
          tag: ${{ inputs.BaseImageTag }}-${{ steps.version_code_check.outputs.VERSION_CODE }}
          prerelease: true
          overwrite: true
      -
        name: Update digest to file
        run: |
          BASE_IMAGE_DIGEST=$(curl -s https://registry.hub.docker.com/v2/repositories/pihole/pihole/tags/${{ inputs.BaseImageTag }} | grep -oP '"digest":"\K[^"]+' | tail -1)
          echo "New Digest: $BASE_IMAGE_DIGEST"
          echo $BASE_IMAGE_DIGEST > ./digest_base_${{ inputs.BaseImageTag }}
      -
        name: Commit files
        run: |
          if [[ $(git status) == *"nothing to commit, working tree clean"* ]]; then
          exit 0
          fi
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -a -m "Base Digest Updated"
      -
        name: Push changes to repository
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
      -
        name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_NAMESPACE }}/pihole-bind9
          short-description: ${{ github.event.repository.description }}